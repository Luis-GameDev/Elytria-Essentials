plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'me.luisgamedev'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "citizens-repo"
        url = "https://repo.citizensnpcs.co/"
    }
    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven { url = "https://repo.mythiccraft.io/snapshots" }
    flatDir { dirs 'libs' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly files("libs/Citizens-2.0.33-b3399.jar")
    compileOnly("net.luckperms:api:5.4")
    compileOnly("me.clip:placeholderapi:2.11.5")
    compileOnly("com.mysql:mysql-connector-j:8.3.0")
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.18'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'
    compileOnly 'com.github.NetzkroneHD:WGRegionEvents:v1.7.4'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7.1'
    compileOnly 'io.lumine.mythichud:mythichud-api:2.3.0'
    compileOnly files("libs/MythicLib-dist-1.7.1-20250911.223617-39.jar")
    compileOnly files("libs/MMOCore-1.13.1-20250912.211559-24.jar")
    compileOnly files("libs/MMOItems-6.10.1-20250906.130656-32.jar")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
